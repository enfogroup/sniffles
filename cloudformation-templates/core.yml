AWSTemplateFormatVersion: '2010-09-09'
Description: Sniffles Core

Parameters:
  ExistingKinesisStream:
    Type: String
    Description: Existing Kinesis stream ARN (leave empty to create one)
    Default: ""
  SnsTopic:
    Type: String
    Description: Existing SNS topic ARN (leave empty to create one)
  WhitelistParameterStorePath:
    Type: String
    Description: SSM Parameter Store path to whitelist, without leading slash
    Default: "sniffles/default/whitelist"
  ProjectKey:
    Type: String
    Description: ProjectKey is included in the alarm, e.g. CADINT, COPSAWS, PN
  ErrorMessage:
    Type: String
    Description: ErrorMessage is included in the alarm, e.g. "An error was logged"
    Default: Error logged in
  S3Bucket:
    Type: String
    Description: Where the core lambda is stored
  S3Key:
    Type: String
    Description: Where the core lambda is located

Conditions:
  CreateKinesisStream:
    Fn::Equals:
      - !Ref ExistingKinesisStream
      - ""

Resources:
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Condition: CreateKinesisStream
    Properties:
      Name: !Sub '${AWS::StackName}'
      ShardCount: 1
      RetentionPeriodHours: 24
  KinesisToLambda:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 10
      MaximumRetryAttempts: 3
      ParallelizationFactor: 1
      StartingPosition: LATEST
      FunctionName: !Ref Lambda
      Enabled: true
      # TODO: DestinationConfig for discarded records
      EventSourceArn:
        Fn::If:
          - CreateKinesisStream
          - !Sub "${KinesisStream.Arn}"
          - !Ref ExistingKinesisStream
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Environment:
        Variables:
          AccountId: !Sub "${AWS::AccountId}"
          ErrorMessage: !Ref ErrorMessage
          ProjectKey: !Ref ProjectKey
          WhitelistParameterStorePath: !Sub "/${WhitelistParameterStorePath}"
          TopicArn: !Ref SnsTopic
      Handler: index.handler
      MemorySize: 128
      Timeout: 30
      Role: !Sub ${LambdaExecutionRole.Arn}
      FunctionName: !Sub "${AWS::StackName}"
      Description: !Sub "${AWS::StackName}"
      Runtime: nodejs12.x
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
      RetentionInDays: 30
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: MyPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Resource:
                  Fn::If:
                    - CreateKinesisStream
                    - !Sub "${KinesisStream.Arn}"
                    - !Ref ExistingKinesisStream
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:DescribeStreamSummary"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                  - "kinesis:ListShards"
                  - "kinesis:ListStreams"
                  - "kinesis:SubscribeToShard"
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref SnsTopic
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${WhitelistParameterStorePath}'
  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Condition: CreateKinesisStream
    Properties:
      RoleName: !Sub "CloudwatchRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: MyPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecords
                  - kinesis:PutRecord
                Resource:
                  - !Sub "${KinesisStream.Arn}"

Outputs:
  KinesisStream:
    Value: !Sub '${KinesisStream.Arn}'
  CloudwatchRole:
    Value: !Sub '${CloudWatchLogsRole.Arn}'
